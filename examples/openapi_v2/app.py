# noqa: INP001
from __future__ import annotations

from contextlib import suppress
from typing import TYPE_CHECKING, Literal

import msgspec
from starlette.responses import Response

from asgiext import init_app_and_get_runner
from asgiext.features.app_features.starlette import StarletteFeature
from asgiext.features.core.asgi_web_server import ASGIWebServerFeature
from asgiext.features.openapi import OpenAPIFeature

if TYPE_CHECKING:
    from starlette.requests import Request


class Address(msgspec.Struct):
    city: str
    street: str


class Person(msgspec.Struct):
    name: str
    age: int
    address: Address


class Cat(msgspec.Struct):
    name: str
    color: Literal["black", "orange", "white", "gray", "blue"]
    weight: float
    owner: Person | None = None


# The objects that we describe in the structures and that the API returns in the example below are slightly different
# from how we describe them in the OpenAPI documentation schemas.
# This is the compromise that needs to be made to allow flexibility in describing OpenAPI documentation
# We could use msgspec.json.schema_components(...) and get valid OpenAPI json schemas,
# for example - owner: Person | None = None - through autogeneration is converted to
# {'anyOf': [{'type': 'null'}, {'$ref': '#/components/schemas/Person'}]
# even though it's correct from the OpenAPI 3.x point of view.
# (https://swagger.io/docs/specification/data-models/oneof-anyof-allof-not/)
# but Swagger UI for OpenAPI 2.0 doesn't support it.
# (https://github.com/OAI/OpenAPI-Specification/issues/333)
# (And we're keeping OpenAPI 2.0 compatibility for now, because Swagger UI with OpenAPI 3.x version
# has its own "features" - for example, at the time these lines were written, Swagger UI with OpenAPI 3.x
# did not display the default 0 for integer values. But Swagger UI with OpenAPI 2.0 does)
# and the last reason to choose explicit component definition is the Zen of Python - explicit is better than implicit
# OpenAPI documentation is documentation, and the author of this code believes that documentation
# should not be autogenerated (unless autogeneration is perfect, which it is not).

cats = [
    Cat(name="Tom", color="blue", weight=3.9, owner=None),
    Cat(
        name="Leo",
        color="black",
        weight=4.5,
        owner=Person(name="John Doe", age=24, address=Address(city="London", street="221B Baker Street")),
    ),
]

ADDRESS_SCHEMA = """
title: Address
type: object
properties:
  city:
    type: string
  street:
    type: string
required:
- city
- street
"""
PERSON_SCHEMA = {
    "title": "Person",
    "type": "object",
    "properties": {
        "name": {"type": "string"},
        "age": {"type": "integer"},
        "address": {"$ref": "#/definitions/Address"},
    },
    "required": ["name", "age", "address"],
}
CAT_SCHEMA = {
    "title": "Cat",
    "type": "object",
    "properties": {
        "name": {"type": "string"},
        "color": {"enum": ["black", "blue", "gray", "orange", "white"]},
        "weight": {"type": "number"},
        "owner": {"$ref": "#/definitions/Person"},
    },
    "required": ["name", "color", "weight"],
}

SCHEMAS = {"Address": ADDRESS_SCHEMA, "Person": PERSON_SCHEMA}

# We can pass components when creating an OpenapiFeature
openapi_feature = OpenAPIFeature(schemas=SCHEMAS)

# or register them after the feature is created
openapi_feature.register_schema("Cat", CAT_SCHEMA)

# NOTE: examples and headers require the features to go through an initialization step,
# as these components are missing in OpenAPI 2.0.
# We should get an error if we try to add these components to OpenAPI 2.0

with suppress(RuntimeError):
    openapi_feature.register_header(
        "X-Request-ID", {"description": "Correlation ID for HTTP request", "schema": {"type": "string"}}
    )

starlette_feature = StarletteFeature()
features = [
    starlette_feature,
    ASGIWebServerFeature(),
    openapi_feature,
]

runner = init_app_and_get_runner(features, starlette_feature) # type: ignore
app = starlette_feature.app

with suppress(ValueError):
    openapi_feature.register_header(
        "X-Request-ID", {"description": "Correlation ID for HTTP request", "schema": {"type": "string"}}
    )

# Schemas in OpenAPI 2 major version go to #/definitions/{name}
# when writing OpenAPI documentation, you can refer to them in this way
# NOTE: for OpenAPI 3 the refs will look like this #/components/schemas/{name}


def get_cats(request: Request) -> Response:  # noqa: ARG001
    """Get all cats.
    ---
    get:
      tags:
        - cats
      summary: API for get all cats
      responses:
        "200":
          description: All the cats
          schema:
            type: array
            items:
              $ref: "#/definitions/Cat"
        "500":
          description: Internal server error.
    """
    return Response(msgspec.json.encode(cats), media_type="application/json")

app.add_route("/", get_cats)

if __name__ == "__main__":
    runner()
